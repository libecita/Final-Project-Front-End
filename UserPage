#UserPage

import './UserStyle.css';
import {useEffect, useState} from "react";
import {getUserData, postData,putData,deleteUser} from "../services/api-services";
import UserList from "./UserList";
import UserForm from './UserForm';
export default function UserPage() {
     const [users, setUsers] = useState([]);
     const [mode, setMode] = useState('list') //'list', 'create' or 'edit'
     const [selectedUser, setSelectedUser] = useState(null);// holds data fro editing
     const [error, setError] = useState(null);

     //URL of the API endpoint
     const API_URL = 'http://localhost:8080/api/v1/users';


     useEffect(()=>{
                fetchUsers();
            },[]);

            const fetchUsers = async () => {

                try {
                    const data = await getUserData(API_URL);
                    setUsers(data);
                } catch (error) {
                    console.error('Error fetching users:', error);
                    setError(error.message);
                }
            };
     const handleSaveUsers = async (data, id) => {
         try {
             if (id) {
                 //update existing user
                 await putData(`${API_URL}/${id}` + '/' + id, id, data)

             } else {
                 //create new user
                 await postData(API_URL, data);
             }
             fetchUsers(); // refresh list after saving
             setMode('list') // go back to the list view after saving
         } catch (error) {
             console.error('Error saving user:', error);
         };
     }
     function handleDelete(userIdentifier){
         console.log("delete: " + userIdentifier)
         return async () => {
             try {
                 const data = await deleteUser(API_URL, userIdentifier);
                 fetchUsers();
             }
             catch (error){
                 console.error('Error deleting user: ', error);
                 setError(error.message);

             }

         };
     }

        return (
            <div className="container mt-4">
                {mode === 'list' && ( <UserList
                                    users={users}
                                    onDelete={handleDelete}
                                    onEdit={handleEditUser}
                                    onCreate={handleAddNew}
                                    onAddNew={handleAddNew}

                    /> ) }
                {mode ==='create ' && (<UserForm onSave={handleSaveUsers}/>)}
                {mode === 'edit ' && selectedUser && (<UserForm onSave={handleSaveUsers} user = {selectedUser} />)}
                    </div>    )


function handleEditUser(user) {
    setSelectedUser (user);
    setMode('edit');
}

function handleAddNew(){
    setSelectedUser(null);
    setMode('create');


}

 };
